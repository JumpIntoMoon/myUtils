<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >
<!--配置web.xml，使其具有springmvc特性，主要配置两处，一个是ContextLoaderListener，一个是DispatcherServlet-->
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <display-name>Archetype Created Web Application</display-name>

    <!--**********************************开始配置spring************************************-->

    <!--spring自己的配置文件路径-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:/applicationContext.xml</param-value>
    </context-param>

    <!--配置ContextLoaderListener表示：该工程要以spring的方式启动。
    启动时会默认在/WEB-INF目录下查找上面所配置路径下的applicationContext.xml作为spring容器的配置文件，该文件里可以初始化一些bean-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--为了能够处理中文的post请求，再配置一个encodingFilter，以避免post请求中文出现乱码情况-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--**********************************配置spring结束************************************-->


    <!--********************************开始配置spring MVC**********************************-->

    <!-- 配置DispatcherServlet表示：该工程将采用springmvc的方式启动。
    启动时也会默认在/WEB-INF目录下查找XXX-servlet.xml作为配置文件，
    XXX就是DispatcherServlet的名字，该文件中将配置两项重要的mvc特性：
    1）HandlerMapping,负责为DispatcherServlet这个前端控制器的请求查找Controller；
    2）ViewResolver,负责为DispatcherServlet查找ModelAndView的视图解析器。
    此处使用指定的配置文件spring-mvc.xml -->
    <servlet>
        <servlet-name>springMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!--<param-value>/WEB-INF/classes/spring-mvc.xml</param-value>-->
            <param-value>classpath*:/spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springMVC</servlet-name>
        <!--
        '/'代表只拦截以'/'结尾的请求（即所有请求），
        以*.do结尾代表只拦截.do结尾的请求...
        当这里的url=pattern配置为'/'时，代表所有请求都被拦截，然后把所有的请求都交给spring去处理了，
        而所有available的请求url都是在Constroller里使用类似@RequestMapping(value = "/login/{user}", method = RequestMethod.GET)这样的注解配置的，
        这样的话对js/css/jpg/gif等静态资源的访问就会得不到。

        解决办法：

        方案一：激活Tomcat的defaultServlet来处理静态文件
        在web.xml里添加如下配置：
        <servlet-mapping>
            <servlet-name>default</servlet-name>
            <url-pattern>*.jpg</url-pattern>
        </servlet-mapping>
        <servlet-mapping>
            <servlet-name>default</servlet-name>
            <url-pattern>*.js</url-pattern>
        </servlet-mapping>
        <servlet-mapping>
            <servlet-name>default</servlet-name>
            <url-pattern>*.css</url-pattern>
        </servlet-mapping>

        要配置多个，每种文件配置一个。
        要写在DispatcherServlet的前面， 让defaultServlet先拦截，这个就不会进入Spring了，我想性能是最好的吧。
        Tomcat, Jetty, JBoss, and GlassFish  默认 Servlet的名字  "default"
        Google App Engine 默认 Servlet的名字  "_ah_default"
        Resin 默认 Servlet的名字  "resin-file"
        WebLogic 默认 Servlet的名字   "FileServlet"
        WebSphere  默认 Servlet的名字  "SimpleFileServlet"

        方案二： 在spring3.0.4以后版本提供了mvc:resources
        <mvc:resources> 的使用方法：
        <mvc:resources mapping="/images/**" location="/images/" />
        /images/**映射到 ResourceHttpRequestHandler 进行处理，
        location指定静态资源的位置.可以是web application根目录下、jar包里面，
        这样可以把静态资源压缩到jar包中。
        cache-period可以使得静态资源进行web cache。
        如果出现下面的错误，可能是没有配置 <mvc:annotation-driven /> 的原因。
        报错WARNING: No mapping found for HTTP request with URI [/mvc/user/findUser/lisi/770] in DispatcherServlet with name 'springMVC'

        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--********************************配置spring MVC结束**********************************-->


    <!--********************************开始配置log4j**********************************-->
    <!--Servlet 3.0或更高版本是无需在web.xml中配置log4j的，
    它默认指定配置文件应命名为log4j2.xml，并要求放置在classpath中，
    所以在maven项目里，只要在resources目录下新建log4j2.xml文件即可，否则要设置-->
    <!--<context-param>
        <param-name>log4jConfiguration</param-name>
        <param-value>classpath:log4j2.xml</param-value>
    </context-param>-->
    <!--如果项目还是基于Servlet 2.x的，
    官方声明上Log4j2是不支持Servlet 3.0以下版本的，
    网上有教程称设置监听器和过滤器，这里给出其参考配置-->
    <!--<listener>
        <listener-class>org.apache.logging.log4j.web.Log4jServletFilter</listener-class>
    </listener>
    <filter>
        <filter-name>log4jServletFilter</filter-name>
        <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>log4jServletFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>-->
    <!--********************************配置log4j结束**********************************-->
    <!--首页-->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>